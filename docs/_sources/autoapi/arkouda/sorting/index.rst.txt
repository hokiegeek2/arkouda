:mod:`arkouda.sorting`
======================

.. py:module:: arkouda.sorting


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   arkouda.sorting.argsort
   arkouda.sorting.coargsort
   arkouda.sorting.local_argsort
   arkouda.sorting.sort


.. function:: argsort(pda)

   Return the permutation that sorts the array.

   :param pda: The array to sort (int64 or float64)
   :type pda: pdarray or Strings

   :returns: The indices such that ``pda[indices]`` is sorted
   :rtype: pdarray, int64

   .. seealso:: :func:`coargsort`

   .. rubric:: Notes

   Uses a least-significant-digit radix sort, which is stable and resilient
   to non-uniformity in data but communication intensive.

   .. rubric:: Examples

   >>> a = ak.randint(0, 10, 10)
   >>> perm = ak.argsort(a)
   >>> a[perm]
   array([0, 1, 1, 3, 4, 5, 7, 8, 8, 9])


.. function:: coargsort(arrays)

   Return the permutation that groups the rows (left-to-right), if the
   input arrays are treated as columns. The permutation sorts numeric
   columns, but not strings -- strings are grouped, but not ordered.

   :param arrays: The columns (int64, float64, or Strings) to sort by row
   :type arrays: iterable of pdarray or Strings

   :returns: The indices that permute the rows to grouped order
   :rtype: pdarray, int64

   .. seealso:: :func:`argsort`

   .. rubric:: Notes

   Uses a least-significant-digit radix sort, which is stable and resilient
   to non-uniformity in data but communication intensive. Starts with the
   last array and moves forward. This sort operates directly on numeric types,
   but for Strings, it operates on a hash. Thus, while grouping of equivalent
   strings is guaranteed, lexicographic ordering of the groups is not.

   .. rubric:: Examples

   >>> a = ak.array([0, 1, 0, 1])
   >>> b = ak.array([1, 1, 0, 0])
   >>> perm = ak.coargsort([a, b])
   >>> perm
   array([2, 0, 3, 1])
   >>> a[perm]
   array([0, 0, 1, 1])
   >>> b[perm]
   array([0, 1, 0, 1])


.. function:: local_argsort(pda)


.. function:: sort(pda)

   Return a sorted copy of the array. Only sorts numeric arrays; for Strings, use argsort.

   :param pda: The array to sort (int64 or float64)
   :type pda: pdarray or Categorical

   :returns: The sorted copy of pda
   :rtype: pdarray, int64 or float64

   .. seealso:: :func:`argsort`

   .. rubric:: Notes

   Uses a least-significant-digit radix sort, which is stable and resilient
   to non-uniformity in data but communication intensive.

   .. rubric:: Examples

   >>> a = ak.randint(0, 10, 10)
   >>> sorted = ak.sort(a)
   >>> a
   array([0, 1, 1, 3, 4, 5, 7, 8, 8, 9])


