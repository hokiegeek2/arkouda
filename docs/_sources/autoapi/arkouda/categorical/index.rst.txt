:mod:`arkouda.categorical`
==========================

.. py:module:: arkouda.categorical


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   arkouda.categorical.Categorical



.. py:class:: Categorical(values, **kwargs)

   Represents an array of values belonging to named categories. Converting a Strings
   object to Categorical often saves memory and speeds up operations, especially
   if there are many repeated values, at the cost of some one-time work in initialization.

   :param values: String values to convert to categories
   :type values: Strings

   .. attribute:: categories

      The set of category labels (determined automatically)

      :type: Strings

   .. attribute:: codes

      The category indices of the values or -1 for N/A

      :type: pdarray, int64

   .. attribute:: permutation

      The permutation that groups the values in the same order as categories

      :type: pdarray, int64

   .. attribute:: segments

      When values are grouped, the starting offset of each group

      :type: pdarray, int64

   .. attribute:: size

      The number of items in the array

      :type: int

   .. attribute:: nlevels

      The number of distinct categories

      :type: int

   .. attribute:: ndim

      The rank of the array (currently only rank 1 arrays supported)

      :type: int

   .. attribute:: shape

      The sizes of each dimension of the array

      :type: tuple

   .. attribute:: BinOps
      

      

   .. attribute:: objtype
      :annotation: = category

      

   .. attribute:: permutation
      

      

   .. attribute:: segments
      

      

   .. method:: from_codes(cls, codes, categories, permutation=None, segments=None)
      :classmethod:


      Make a Categorical from codes and categories arrays. If codes and categories
      have already been precomputed, this constructor saves time. If not, please
      use the normal constructor.

      :param codes: Category indices of each value
      :type codes: pdarray, int64
      :param categories: Unique category labels
      :type categories: String


   .. method:: to_ndarray(self)


      Convert the array to a np.ndarray, transferring array data from the
      arkouda server to Python. This conversion discards category information
      and produces an ndarray of strings. If the array exceeds a builtin size limit,
      a RuntimeError is raised.

      :returns: A numpy ndarray of strings corresponding to the values in this array
      :rtype: np.ndarray

      .. rubric:: Notes

      The number of bytes in the array cannot exceed ``arkouda.maxTransferBytes``,
      otherwise a ``RuntimeError`` will be raised. This is to protect the user
      from overflowing the memory of the system on which the Python client
      is running, under the assumption that the server is running on a
      distributed system with much more memory than the client. The user
      may override this limit by setting ak.maxTransferBytes to a larger
      value, but proceed with caution.


   .. method:: __iter__(self)



   .. method:: __len__(self)



   .. method:: __str__(self)


      Return str(self).


   .. method:: __repr__(self)


      Return repr(self).


   .. method:: binop(self, other, op)



   .. method:: r_binop(self, other, op)



   .. method:: __eq__(self, other)


      Return self==value.


   .. method:: __neq__(self, other)



   .. method:: __getitem__(self, key)



   .. method:: reset_categories(self)


      Recompute the category labels, discarding any unused labels. This method
      is often useful after slicing or indexing a Categorical array, when the
      resulting array only contains a subset of the original categories. In
      this case, eliminating unused categories can speed up other operations.


   .. method:: contains(self, substr)


      Check whether each element contains the given substring.

      :param substr: The substring to search for
      :type substr: str

      :returns: True for elements that contain substr, False otherwise
      :rtype: pdarray, bool

      .. rubric:: Notes

      This method can be significantly faster than the corresponding method
      on Strings objects, because it searches the unique category labels
      instead of the full array.

      .. seealso:: :meth:`Categorical.startswith`, :meth:`Categorical.endswith`


   .. method:: startswith(self, substr)


      Check whether each element starts with the given substring.

      :param substr: The substring to search for
      :type substr: str

      :returns: True for elements that contain substr, False otherwise
      :rtype: pdarray, bool

      .. rubric:: Notes

      This method can be significantly faster than the corresponding method
      on Strings objects, because it searches the unique category labels
      instead of the full array.

      .. seealso:: :meth:`Categorical.contains`, :meth:`Categorical.endswith`


   .. method:: endswith(self, substr)


      Check whether each element ends with the given substring.

      :param substr: The substring to search for
      :type substr: str

      :returns: True for elements that contain substr, False otherwise
      :rtype: pdarray, bool

      .. rubric:: Notes

      This method can be significantly faster than the corresponding method
      on Strings objects, because it searches the unique category labels
      instead of the full array.

      .. seealso:: :meth:`Categorical.startswith`, :meth:`Categorical.contains`


   .. method:: in1d(self, test)



   .. method:: unique(self)



   .. method:: group(self)


      Return the permutation that groups the array, placing equivalent
      categories together. All instances of the same category are guaranteed to lie
      in one contiguous block of the permuted array, but the blocks are not
      necessarily ordered.

      :returns: The permutation that groups the array by value
      :rtype: pdarray

      .. seealso:: :meth:`GroupBy`, :meth:`unique`

      .. rubric:: Notes

      This method is faster than the corresponding Strings method. If the Categorical
      was created from a Strings object, then this function simply returns the
      cached permutation. Even if the Categorical was created using from_codes(),
      this function will be faster than Strings.group() because it sorts dense
      integer values, rather than 128-bit hash values.


   .. method:: argsort(self)



   .. method:: sort(self)



   .. method:: merge(self, others)


      Merge this Categorical with other Categoricals, concatenating the arrays and
      synchronizing the categories.

      :param others: The Categorical arrays to concatenate and merge with this one
      :type others: list of Categorical

      .. rubric:: Notes

      This operation can be expensive -- slower than concatenating Strings arrays.



