:mod:`arkouda.groupbyclass`
===========================

.. py:module:: arkouda.groupbyclass


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   arkouda.groupbyclass.GroupBy



.. py:class:: GroupBy(keys, assume_sorted=False, hash_strings=True)

   Group an array or list of arrays by value, usually in preparation
   for aggregating the within-group values of another array.

   :param keys: The array to group by value, or if list, the column arrays to group by row
   :type keys: (list of) pdarray, int64 or Strings
   :param assume_sorted: If True, assume keys is already sorted (Default: False)
   :type assume_sorted: bool

   .. attribute:: nkeys

      The number of key arrays (columns)

      :type: int

   .. attribute:: size

      The length of the array(s), i.e. number of rows

      :type: int

   .. attribute:: permutation

      The permutation that sorts the keys array(s) by value (row)

      :type: pdarray

   .. attribute:: unique_keys

      The unique values of the keys array(s), in grouped order

      :type: (list of) pdarray or Strings

   .. attribute:: segments

      The start index of each group in the grouped array(s)

      :type: pdarray

   .. attribute:: unique_key_indices

      The first index in the raw (ungrouped) keys array(s) where each
      unique value (row) occurs

      :type: pdarray

   .. rubric:: Notes

   Only accepts pdarrays of int64 dtype or Strings.

   .. attribute:: Reductions
      

      

   .. method:: find_segments(self)



   .. method:: count(self)


      Count the number of elements in each group, i.e. the number of times
      each key appears.

      :param none:

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **counts** (*pdarray, int64*) -- The number of times each unique key appears


   .. method:: aggregate(self, values, operator)


      Using the permutation stored in the GroupBy instance, group another array
      of values and apply a reduction to each group's values.

      :param values: The values to group and reduce
      :type values: pdarray
      :param operator: The name of the reduction operator to use
      :type operator: str

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **aggregates** (*pdarray*) -- One aggregate value per unique key in the GroupBy instance


   .. method:: sum(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and sum each group's values.

      :param values: The values to group and sum
      :type values: pdarray

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_sums** (*pdarray*) -- One sum per unique key in the GroupBy instance

      .. rubric:: Notes

      The grouped sum of a boolean ``pdarray`` returns integers.


   .. method:: prod(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and compute the product of each group's values.

      :param values: The values to group and multiply
      :type values: pdarray

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_products** (*pdarray, float64*) -- One product per unique key in the GroupBy instance

      .. rubric:: Notes

      The return dtype is always float64.


   .. method:: mean(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and compute the mean of each group's values.

      :param values: The values to group and average
      :type values: pdarray

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_means** (*pdarray, float64*) -- One mean value per unique key in the GroupBy instance

      .. rubric:: Notes

      The return dtype is always float64.


   .. method:: min(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and return the minimum of each group's values.

      :param values: The values to group and find minima
      :type values: pdarray

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_minima** (*pdarray*) -- One minimum per unique key in the GroupBy instance


   .. method:: max(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and return the maximum of each group's values.

      :param values: The values to group and find maxima
      :type values: pdarray

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_maxima** (*pdarray*) -- One maximum per unique key in the GroupBy instance


   .. method:: argmin(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and return the location of the first minimum of each group's values.

      :param values: The values to group and find argmin
      :type values: pdarray

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_argminima** (*pdarray, int64*) -- One index per unique key in the GroupBy instance

      .. rubric:: Notes

      The returned indices refer to the original values array as passed in, not
      the permutation applied by the GroupBy instance.

      .. rubric:: Examples

      >>> A = ak.array([0, 1, 0, 1, 0, 1])
      >>> B = ak.array([0, 1, 1, 0, 0, 1])
      >>> byA = ak.GroupBy(A)
      >>> byA.argmin(B)
      (array([0, 1]), array([0, 3]))


   .. method:: argmax(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and return the location of the first maximum of each group's values.

      :param values: The values to group and find argmax
      :type values: pdarray

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_argmaxima** (*pdarray, int64*) -- One index per unique key in the GroupBy instance

      .. rubric:: Notes

      The returned indices refer to the original values array as passed in, not
      the permutation applied by the GroupBy instance.

      .. rubric:: Examples

      >>> A = ak.array([0, 1, 0, 1, 0, 1])
      >>> B = ak.array([0, 1, 1, 0, 0, 1])
      >>> byA = ak.GroupBy(A)
      >>> byA.argmax(B)
      (array([0, 1]), array([2, 1]))


   .. method:: nunique(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and return the number of unique values in each group.

      :param values: The values to group and find unique values
      :type values: pdarray, int64

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_nunique** (*pdarray, int64*) -- Number of unique values per unique key in the GroupBy instance


   .. method:: any(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and perform an "or" reduction on each group.

      :param values: The values to group and reduce with "or"
      :type values: pdarray, bool

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_any** (*pdarray, bool*) -- One bool per unique key in the GroupBy instance


   .. method:: all(self, values)


      Using the permutation stored in the GroupBy instance, group another array
      of values and perform an "and" reduction on each group.

      :param values: The values to group and reduce with "and"
      :type values: pdarray, bool

      :returns: * **unique_keys** (*(list of) pdarray or Strings*) -- The unique keys, in grouped order
                * **group_any** (*pdarray, bool*) -- One bool per unique key in the GroupBy instance


   .. method:: broadcast(self, values)


      Fill each group's segment with a constant value.

      :param values: The values to put in each group's segment
      :type values: pdarray

      :returns: The broadcast values
      :rtype: pdarray

      .. rubric:: Notes

      This function is a sparse analog of ``np.broadcast``. If a
      GroupBy object represents a sparse matrix (tensor), then
      this function takes a (dense) column vector and replicates
      each value to the non-zero elements in the corresponding row.

      The returned array is in permuted (grouped) order. To get
      back to the order of the array on which GroupBy was called,
      the user must invert the permutation (see below).

      .. rubric:: Examples

      >>> a = ak.array([0, 1, 0, 1, 0])
      >>> values = ak.array([3, 5])
      >>> g = ak.GroupBy(a)
      # Result is in grouped order
      >>> g.broadcast(values)
      array([3, 3, 3, 5, 5]

      >>> b = ak.zeros_like(a)
      # Result is in original order
      >>> b[g.permutation] = g.broadcast(values)
      >>> b
      array([3, 5, 3, 5, 3])



