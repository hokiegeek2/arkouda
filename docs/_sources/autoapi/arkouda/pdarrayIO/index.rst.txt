:mod:`arkouda.pdarrayIO`
========================

.. py:module:: arkouda.pdarrayIO


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   arkouda.pdarrayIO.ls_hdf
   arkouda.pdarrayIO.read_hdf
   arkouda.pdarrayIO.read_all
   arkouda.pdarrayIO.load
   arkouda.pdarrayIO.get_datasets
   arkouda.pdarrayIO.load_all
   arkouda.pdarrayIO.save_all


.. function:: ls_hdf(filename)

   This function calls the h5ls utility on a filename visible to the arkouda
   server.

   :param filename: The name of the file to pass to h5ls
   :type filename: str

   :returns: The string output of `h5ls <filename>` from the server
   :rtype: str


.. function:: read_hdf(dsetName, filenames)

   Read a single dataset from multiple HDF5 files into an arkouda pdarray.

   :param dsetName: The name of the dataset (must be the same across all files)
   :type dsetName: str
   :param filenames: Either a list of filenames or shell expression
   :type filenames: list or str

   :returns: A pdarray instance pointing to the server-side data read in
   :rtype: pdarray

   .. seealso:: :func:`get_datasets`, :func:`ls_hdf`, :func:`read_all`, :func:`load`, :func:`save`

   .. rubric:: Notes

   If filenames is a string, it is interpreted as a shell expression
   (a single filename is a valid expression, so it will work) and is
   expanded with glob to read all matching files. Use ``get_datasets`` to
   show the names of datasets in HDF5 files.

   If dsetName is not present in all files, a RuntimeError is raised.


.. function:: read_all(filenames, datasets=None, iterative=False)

   Read datasets from HDF5 files.

   :param filenames: Either a list of filenames or shell expression
   :type filenames: list or str
   :param datasets: (List of) name(s) of dataset(s) to read (default: all available)
   :type datasets: list or str or None
   :param iterative: Iterative (True) or Single (False) function call(s) to server
   :type iterative: boolean

   :returns: * *For a single dataset returns an Arkouda pdarray or an Arkouda Sring and*
             * *for multiple datasets returns a dictionary of Ardkouda pdarrays and*
             * *Arkouda Strings.* -- Dictionary of {datasetName: pdarray or String}

   .. seealso:: :func:`read_hdf`, :func:`get_datasets`, :func:`ls_hdf`

   .. rubric:: Notes

   If filenames is a string, it is interpreted as a shell expression
   (a single filename is a valid expression, so it will work) and is
   expanded with glob to read all matching files.

   If iterative == True each dataset name and file names are passed to
   the server as independent sequential strings while if iterative == False
   all dataset names and file names are passed to the server in a single
   string.

   If datasets is None, infer the names of datasets from the first file
   and read all of them. Use ``get_datasets`` to show the names of datasets in
   HDF5 files.

   If not all datasets are present in all HDF5 files, a RuntimeError
   is raised.a


.. function:: load(path_prefix, dataset='array')

   Load a pdarray previously saved with ``pdarray.save()``.

   :param path_prefix: Filename prefix used to save the original pdarray
   :type path_prefix: str
   :param dataset: Dataset name where the pdarray was saved
   :type dataset: str

   :returns: The pdarray that was previously saved
   :rtype: pdarray

   .. seealso:: :func:`save`, :func:`load_all`, :func:`read_hdf`, :func:`read_all`


.. function:: get_datasets(filename)

   Get the names of datasets in an HDF5 file.

   :param filename: Name of an HDF5 file visible to the arkouda server
   :type filename: str

   :returns: Names of the datasets in the file
   :rtype: list of str

   .. seealso:: :func:`ls_hdf`


.. function:: load_all(path_prefix)

   Load multiple pdarray previously saved with ``save_all()``.

   :param path_prefix: Filename prefix used to save the original pdarray
   :type path_prefix: str

   :returns: Dictionary of {datsetName: pdarray} with the previously saved pdarrays
   :rtype: dict of pdarrays

   .. seealso:: :func:`save_all`, :func:`load`, :func:`read_hdf`, :func:`read_all`


.. function:: save_all(columns, path_prefix, names=None, mode='truncate')

   Save multiple named pdarrays to HDF5 files.

   :param columns: Collection of arrays to save
   :type columns: dict or list of pdarrays
   :param path_prefix: Directory and filename prefix for output files
   :type path_prefix: str
   :param names: Dataset names for the pdarrays
   :type names: list of str
   :param mode: By default, truncate (overwrite) the output files if they exist.
                If 'append', attempt to create new dataset in existing files.
   :type mode: {'truncate' | 'append'}

   .. seealso:: :func:`save`, :func:`load_all`

   .. rubric:: Notes

   Creates one file per locale containing that locale's chunk of each pdarray.
   If columns is a dictionary, the keys are used as the HDF5 dataset names.
   Otherwise, if no names are supplied, 0-up integers are used. By default,
   any existing files at path_prefix will be overwritten, unless the user
   specifies the 'append' mode, in which case arkouda will attempt to add
   <columns> as new datasets to existing files. If the wrong number of files
   is present or dataset names already exist, a RuntimeError is raised.


