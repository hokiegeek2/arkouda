:mod:`arkouda.io_util`
======================

.. py:module:: arkouda.io_util


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   arkouda.io_util.get_directory
   arkouda.io_util.write_line_to_file
   arkouda.io_util.delimited_file_to_dict
   arkouda.io_util.dict_to_delimited_file


.. function:: get_directory(path: str) -> Path

   Creates the directory if it does not exist and then
   returns the corresponding Path object

   :param str path: the path to the directory
   :return: Path object corresponding to the directory
   :rtype: Path
   :raise: ValueError if there's an error in reading
           existing directory or creating new one


.. function:: write_line_to_file(path: str, line: str) -> None

   Writes a line to the requested file. Note: if the file
   does not exist, the file is created first and then
   the specified line is written to it.

   :param str path: path to the target file
   :param str line: line to be written to file
   :return: None
   :raise: UnsupportedOption if there's an error creating
           or writing to the file


.. function:: delimited_file_to_dict(path: str, delimiter: str = ',') -> Mapping[str, str]

   Returns a dictionary populated by lines from a file where
   the first delimited element of each line is the key and
   the second delimited element is the value.

   :param str path: path to file
   :param str delimiter: delimiter separating key and value
   :return: dict containing key -> value
   :rtype: Mapping[str,str]
   :raise: UnsupportedOperation if there's an error in reading
           the file


.. function:: dict_to_delimited_file(path: str, values: Mapping[Any, Any], delimiter: str = ',') -> None

   Writes a dictionary to delimited lines in a file where
   the first delimited element of each line is the dict key
   and the second delimited element is the dict value. If the
   file does not exist, it is created and then written to.

   :param str path: path to file
   :param str delimiter: delimiter separating key and value
   :return: dict containing key -> value
   :rtype: Mapping[str,str]
   :raise: IOError if there's an error opening or writing to
           the specified file, ValueError if the delimiter is
           not supported


