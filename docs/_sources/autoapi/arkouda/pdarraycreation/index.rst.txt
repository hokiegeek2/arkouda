:mod:`arkouda.pdarraycreation`
==============================

.. py:module:: arkouda.pdarraycreation


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   arkouda.pdarraycreation.array
   arkouda.pdarraycreation.zeros
   arkouda.pdarraycreation.ones
   arkouda.pdarraycreation.zeros_like
   arkouda.pdarraycreation.ones_like
   arkouda.pdarraycreation.arange
   arkouda.pdarraycreation.linspace
   arkouda.pdarraycreation.randint
   arkouda.pdarraycreation.uniform
   arkouda.pdarraycreation.standard_normal
   arkouda.pdarraycreation.random_strings_uniform
   arkouda.pdarraycreation.random_strings_lognormal


.. function:: array(a)

   Convert an iterable to a pdarray, sending data to the arkouda server.

   :param a: Rank-1 array of a supported dtype
   :type a: array_like

   :returns: Instance of pdarray stored on arkouda server
   :rtype: pdarray

   .. seealso:: :func:`pdarray.to_ndarray`

   .. rubric:: Notes

   The number of bytes in the input array cannot exceed `arkouda.maxTransferBytes`,
   otherwise a RuntimeError will be raised. This is to protect the user
   from overwhelming the connection between the Python client and the arkouda
   server, under the assumption that it is a low-bandwidth connection. The user
   may override this limit by setting ak.maxTransferBytes to a larger value,
   but should proceed with caution.

   .. rubric:: Examples

   >>> a = [3, 5, 7]
   >>> b = ak.array(a)
   >>> b
   array([3, 5, 7])

   >>> type(b)
   arkouda.pdarray


.. function:: zeros(size, dtype=np.float64)

   Create a pdarray filled with zeros.

   :param size: Size of the array (only rank-1 arrays supported)
   :type size: int
   :param dtype: Type of resulting array, default float64
   :type dtype: {float64, int64, bool}

   :returns: Zeros of the requested size and dtype
   :rtype: pdarray

   .. seealso:: :func:`ones`, :func:`zeros_like`

   .. rubric:: Examples

   >>> ak.zeros(5, dtype=ak.int64)
   array([0, 0, 0, 0, 0])
   >>> ak.zeros(5, dtype=ak.float64)
   array([0, 0, 0, 0, 0])
   >>> ak.zeros(5, dtype=ak.bool)
   array([False, False, False, False, False])


.. function:: ones(size, dtype=float64)

   Create a pdarray filled with ones.

   :param size: Size of the array (only rank-1 arrays supported)
   :type size: int
   :param dtype: Resulting array type, default float64
   :type dtype: {float64, int64, bool}

   :returns: Ones of the requested size and dtype
   :rtype: pdarray

   .. seealso:: :func:`zeros`, :func:`ones_like`

   .. rubric:: Examples

   >>> ak.ones(5, dtype=ak.int64)
   array([1, 1, 1, 1, 1])
   >>> ak.ones(5, dtype=ak.float64)
   array([1, 1, 1, 1, 1])
   >>> ak.ones(5, dtype=ak.bool)
   array([True, True, True, True, True])


.. function:: zeros_like(pda)

   Create a zero-filled pdarray of the same size and dtype as an existing pdarray.

   :param pda: Array to use for size and dtype
   :type pda: pdarray

   :returns: Equivalent to ak.zeros(pda.size, pda.dtype)
   :rtype: pdarray

   .. seealso:: :func:`zeros`, :func:`ones_like`


.. function:: ones_like(pda)

   Create a one-filled pdarray of the same size and dtype as an existing pdarray.

   :param pda: Array to use for size and dtype
   :type pda: pdarray

   :returns: Equivalent to ak.ones(pda.size, pda.dtype)
   :rtype: pdarray

   .. seealso:: :func:`ones`, :func:`zeros_like`


.. function:: arange(*args)

   arange([start,] stop[, stride])

   Create a pdarray of consecutive integers within the interval [start, stop).
   If only one arg is given then arg is the stop parameter. If two args are given
   then the first arg is start and second is stop. If three args are given
   then the first arg is start, second is stop, third is stride.

   :param start: Starting value (inclusive), the default starting value is 0
   :type start: int, optional
   :param stop: Stopping value (exclusive)
   :type stop: int
   :param stride: The difference between consecutive elements, the default stride is 1,
                  if stride is specified then start must also be specified
   :type stride: int, optional

   :returns: Integers from start (inclusive) to stop (exclusive) by stride
   :rtype: pdarray, int64

   .. seealso:: :func:`linspace`, :func:`zeros`, :func:`ones`, :func:`randint`

   .. rubric:: Notes

   Negative strides result in decreasing values. Currently, only int64 pdarrays
   can be created with this function. For float64 arrays, use linspace.

   .. rubric:: Examples

   >>> ak.arange(0, 5, 1)
   array([0, 1, 2, 3, 4])

   >>> ak.arange(5, 0, -1)
   array([5, 4, 3, 2, 1])

   >>> ak.arange(0, 10, 2)
   array([0, 2, 4, 6, 8])


.. function:: linspace(start, stop, length)

   Create a pdarray of linearly spaced points in a closed interval.

   :param start: Start of interval (inclusive)
   :type start: scalar
   :param stop: End of interval (inclusive)
   :type stop: scalar
   :param length: Number of points
   :type length: int

   :returns: Array of evenly spaced points along the interval
   :rtype: pdarray, float64

   .. seealso:: :func:`arange`

   .. rubric:: Examples

   >>> ak.linspace(0, 1, 5)
   array([0, 0.25, 0.5, 0.75, 1])


.. function:: randint(low, high, size, dtype=int64)

   Generate a pdarray with random values in a specified range.

   :param low: The low value (inclusive) of the range
   :type low: int
   :param high: The high value (exclusive for int, inclusive for float) of the range
   :type high: int
   :param size: The length of the returned array
   :type size: int
   :param dtype: The dtype of the array
   :type dtype: {int64, float64, bool}

   :returns: Values drawn uniformly from the specified range having the desired dtype
   :rtype: pdarray

   .. rubric:: Notes

   Calling randint with dtype=float64 will result in uniform non-integral
   floating point values.

   .. rubric:: Examples

   >>> ak.randint(0, 10, 5)
   array([5, 7, 4, 8, 3])

   >>> ak.randint(0, 1, 3, dtype=ak.float64)
   array([0.92176432277231968, 0.083130710959903542, 0.68894208386667544])

   >>> ak.randint(0, 1, 5, dtype=ak.bool)
   array([True, False, True, True, True])


.. function:: uniform(size, low=0.0, high=1.0)

   Generate a pdarray with uniformly distributed random values in a specified range.

   :param low: The low value (inclusive) of the range
   :type low: int
   :param high: The high value (inclusive) of the range
   :type high: int
   :param size: The length of the returned array
   :type size: int

   :returns: Values drawn uniformly from the specified range
   :rtype: pdarray, float64

   .. rubric:: Examples

   >>> ak.uniform(3)
   array([0.92176432277231968, 0.083130710959903542, 0.68894208386667544])


.. function:: standard_normal(size)

   Draw real numbers from the standard normal distribution.

   :param size: The number of samples to draw (size of the returned array)
   :type size: int

   :returns: The array of random numbers
   :rtype: pdarray, float64

   .. seealso:: :func:`randint`

   .. rubric:: Notes

   For random samples from :math:`N(\mu, \sigma^2)`, use:

   ``(sigma * standard_normal(size)) + mu``


.. function:: random_strings_uniform(minlen, maxlen, size, characters='uppercase')

   Generate random strings with lengths uniformly distributed between
   minlen and maxlen, and with characters drawn from a specified set.

   :param minlen: The minimum allowed length of string
   :type minlen: int
   :param maxlen: The maximum allowed length of string
   :type maxlen: int
   :param size: The number of strings to generate
   :type size: int
   :param characters: The set of characters to draw from
   :type characters: (uppercase, lowercase, numeric, printable, binary)

   :returns: The array of random strings
   :rtype: Strings

   .. seealso:: :func:`random_strings_lognormal`, :func:`randint`


.. function:: random_strings_lognormal(logmean, logstd, size, characters='uppercase')

   Generate random strings with log-normally distributed lengths and
   with characters drawn from a specified set.

   :param logmean: The log-mean of the length distribution
   :type logmean: float
   :param logstd: The log-standard-deviation of the length distribution
   :type logstd: float
   :param size: The number of strings to generate
   :type size: int
   :param characters: The set of characters to draw from
   :type characters: (uppercase, lowercase, numeric, printable, binary)

   :returns: The array of random strings
   :rtype: Strings

   .. seealso:: :func:`random_strings_lognormal`, :func:`randint`

   .. rubric:: Notes

   The lengths of the generated strings are distributed $Lognormal(\mu, \sigma^2)$,
   with :math:`\mu = logmean` and :math:`\sigma = logstd`. Thus, the strings will have
   an average length of :math:`exp(\mu + 0.5*\sigma^2)`, a minimum length of zero, and
   a heavy tail towards longer strings.


